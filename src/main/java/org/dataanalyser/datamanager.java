package org.dataanalyser;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import net.sf.jfasta.FASTAElement;
import net.sf.jfasta.FASTAFileReader;
import net.sf.jfasta.impl.FASTAElementIterator;
import net.sf.jfasta.impl.FASTAFileReaderImpl;



public class datamanager {
    public static int angry = 0;
    public static String way = new String("cheatsheet.json"), path = "directory";
    public static String[] cursingSeeman = {"I'm chilling","Stop this nonsense", "you need to stop", "you make me really angry", "Stop now, or i'll kill you", "Du untruer Wendlerhörer, ich weiß genau was du machst, also hör endlich auf damit" };

    public static void main(String[] args) throws IOException, ParseException {
        
        angrychecker();
        Inputmanager();
        cheatSheetReader();
        fileAnalyser();

    }

    public static void angrychecker() throws IOException {
        
        do{
            File fileCheck = new File(way);
            JSONObject notice = new JSONObject();
            FileReader observer = null;
            
            if (observer == null) {
                if (!fileCheck.exists()) {
                    FileWriter eumel = new FileWriter(way);
                    notice.put("comment", "Do not edit this File. This is my Cheatsheet");
                    eumel.write(notice.toJSONString());
                    eumel.write(System.getProperty("line.separator"));
                    eumel.close();
                    angry++;
                    continue;
                } else {
                    observer = new FileReader(way);
                    observer.close();
                    if (angry > 1) {
                        System.out.println(cursingSeeman[angry]);
                    }
                    break;
                }
            }
        } while(true);
    }

    public static void Inputmanager() throws IOException, ParseException {
        
        final Scanner repopath = new Scanner(System.in);
        final Scanner bob = new Scanner(System.in);

        do {
            JSONObject jamal = cheatSheetReader();
            String Analpath = (String) jamal.get(path);
            File Anal = new File(Analpath);
            if(Anal.isDirectory()){
                System.out.println("Directory request is already satisfied, do you want to use another Directory?[y,n]");
                String bobo = bob.next();
                if(bobo.equals("n")){
                    bob.close();
                    break;
                } else if(!(bobo.equals("n") || bobo.equals("y"))){
                    System.out.println("try again");
                }
            } else{
                System.out.println("Please insert directory path:");
                String repo = repopath.next();
                File repodirect = new File(repo);
                if (repodirect.isDirectory()) {
                    JSONObject wayson = cheatSheetReader();
                    FileWriter eumel = new FileWriter(way, false);
                    wayson.put(path,repo);
                    eumel.write(wayson.toJSONString());
                    eumel.close();
                    repopath.close();
                    break;
                } else {
                    throw new IllegalArgumentException("Input is no Directory, please insert directory");
                }
            }
        } while (true);
    }

    public boolean parsHelp(String parse){
        
        boolean bolsch = false;
        
        JSONParser parser = new JSONParser();
        try {
            parser.parse(new FileReader(way));
            bolsch = true;
        } catch (IOException | ParseException e) {
            e.printStackTrace();
            bolsch = false;
        }
        return bolsch;

    }

    public static JSONObject cheatSheetReader() throws IOException, ParseException {
        
        JSONParser parser = new JSONParser();
        
        Object eumelob = parser.parse(new FileReader(way));
        
        JSONObject wayson = (JSONObject) eumelob;
        
        return wayson;
    }

    public static void fileAnalyser() throws IOException, ParseException {
        JSONObject eumel = cheatSheetReader();

        String Analpath = (String) eumel.get(path);
        
        Path path = Paths.get(Analpath);
        
        List<Path> paths = listFiles(path);
        
        for(int i = 0; i < paths.size(); i++){
            //String ana = paths.get(i).normalize().toString();
            testExample01(paths.get(i).normalize().toString());
        }
    }
    public static List<Path> listFiles(Path path) throws IOException {

        List<Path> result;
        try (Stream<Path> walk = Files.walk(path)) {
            result = walk.filter(Files::isRegularFile)
                    .filter(p -> p.getFileName().toString().endsWith(".fasta"))
                    .collect(Collectors.toList());
        }
        return result;
    }
    
    public final static void testExample01(String fasta) throws IOException {

        final File file = new File(fasta);

        final FASTAFileReader reader = new FASTAFileReaderImpl(file);

        final FASTAElementIterator it = reader.getIterator();
        int base = 0;
        while (it.hasNext()) {
            final FASTAElement el = it.next();
            el.getSequence();
            base++;
            System.out.println(el);
            
        }
        System.out.println(base);
        reader.close();
    } 
    
}
